---
description: Core conventions, repo tasks, and coding standards for the monorepo
globs:
  - '**/*'
---

# Project-wide Conventions

- Use TypeScript strict mode everywhere.
- Prefer functional, small modules. Avoid long classes.
- Always write a short JSDoc for exported functions and types.
- Do not hardcode env secrets; read from process.env with typed helpers.

# Code Quality

- Functions should not exceed 50 lines; extract smaller functions when needed.
- Files should not exceed 300 lines; split into modules when needed.
- Use meaningful variable and function names that describe intent.
- Avoid deep nesting (max 3 levels); extract functions or use early returns.
- Prefer composition over inheritance.
- Use proper error handling with typed error classes.
- Implement proper logging with structured data.

# Documentation coupling (MANDATORY)

- When making changes that affect developer setup or DX, you MUST update `README.md` in the same change set.
- This includes any modifications to:
  - scripts under `package.json` or `scripts/*`
  - environment variables, defaults, or required values
  - ports, URLs, or API base paths
  - project bootstrap instructions, CI commands, or tooling versions
- If you add a new script or flag, document usage and expected outcomes in `README.md`.

# Tasks

- `pnpm dev`: run all dev servers (web + api).
- `pnpm build`, `pnpm test`, `pnpm lint`, `pnpm typecheck` use Turborepo.

# Files & Paths

- Shared code is in `packages/shared`. Import with `@shared/*` path alias.

# Commit Hygiene

- Keep PRs small. Add/adjust tests with code changes.

# TypeScript & Lint

- Strict TypeScript across the monorepo. `any` type is **FORBIDDEN** - use proper typing or `unknown`.
- Enable `noImplicitAny`, `noExplicitAny` compiler flags - enforced via ESLint.
- **MANDATORY**: Run linting checks on ALL modified files before task completion.
- Fix ESLint and type errors before committing.
- All functions must have explicit return types when not inferrable.
- Use proper TypeScript utility types (Partial, Pick, Omit, Record, etc.).
- Prefer type definitions over interfaces when possible for better performance.
- Use const assertions for immutable data structures.

# Quality Assurance

- **CRITICAL**: See `.cursor/rules/quality-assurance.mdc` for mandatory linting and quality checks.
- **NO EXCEPTIONS**: All linting errors must be fixed before task completion.
- **VERIFY**: Always run `read_lints` on modified files and fix all errors.
- **QUALITY GATES**: Task completion only allowed when all quality checks pass.

# Documentation Requirements

- All exported functions, classes, and types must have JSDoc comments.
- Complex business logic must include inline comments explaining the "why".
- Update README.md when adding new scripts, dependencies, or configuration changes.
- API endpoints must be documented with request/response examples.
- Environment variables must be documented in README.md with examples.

# Comprehensive Documentation

- **Architecture**: See `docs/ARCHITECTURE.md` for monorepo structure, design patterns, and configuration management.
- **Development**: See `docs/DEVELOPMENT.md` for detailed development patterns, code organization, and best practices.
- **Security**: See `docs/SECURITY.md` for security best practices and vulnerability reporting.
- **Contributing**: See `CONTRIBUTING.md` for contribution guidelines and development standards.
