---
description: Testing standards for web and api
globs:
  - 'apps/**'
  - 'packages/**'
---

# Testing

- Use Vitest everywhere. On web, use Testing Library with Vitest.
- Strive for fast unit tests; mock network and DB where possible.
- Put tests in `__tests__` close to source.
- Maintain 80% test coverage minimum for branches, functions, lines, and statements.
- **MANDATORY**: All new code must include tests. No exceptions.
- Integration tests required for all API endpoints.
- Component tests required for all React components with user interactions.
- Test error scenarios and edge cases, not just happy paths.
- Use proper test data factories and fixtures.
- Implement proper test isolation and cleanup.

# Vitest Configuration

- Each package has its own Vitest configuration in `vitest.config.ts`
- Root Vitest config orchestrates all packages
- Built-in TypeScript support with Vite
- Use `jsdom` environment for React component testing

# Test Structure

- **API Tests**: Use Supertest for integration testing, mock external dependencies
- **Component Tests**: Use React Testing Library with Vitest
- **Unit Tests**: Test individual functions and utilities
- **Setup Files**: Use `setup.ts` files for test configuration and mocks

# CI & Coverage

- Use Vitest across workspaces. Keep `pnpm test` green.
- Coverage reports generated in HTML and LCOV formats
- Coverage threshold: 80% minimum for all metrics
- Exclude type definitions, node_modules, dist, and coverage directories

# Testing Commands

```bash
# Run all tests
pnpm test

# Run tests in watch mode
pnpm test:watch

# Run tests with coverage
pnpm test:coverage

# Run tests for specific package
pnpm --filter api test
pnpm --filter web test
pnpm --filter @shared/core test
```

# Mock Patterns

- Mock external dependencies (mongoose, APIs, etc.)
- Mock environment variables in test setup
- Use Vitest mocks (`vi.fn()`, `vi.mock()`) for functions and modules
- Mock API responses for consistent testing
- Use proper test doubles (stubs, spies, mocks) appropriately
- Mock database connections and operations
- Mock file system operations and external services
- Use proper async/await patterns in tests

# Test Quality Standards

- Write descriptive test names that explain the behavior being tested
- Follow the AAA pattern (Arrange, Act, Assert)
- Test one thing per test case
- Use proper assertions with meaningful error messages
- Avoid testing implementation details; test behavior
- Use proper setup and teardown for integration tests
- Implement proper test data management and cleanup

# Comprehensive Documentation

- **Testing Patterns**: See `docs/DEVELOPMENT.md` for detailed testing examples, API testing with Supertest, and component testing patterns.
- **Architecture Testing**: See `docs/ARCHITECTURE.md` for testing considerations in the monorepo structure.
- **Contributing**: See `CONTRIBUTING.md` for testing requirements and standards.
