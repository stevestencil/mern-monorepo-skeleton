name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Unit Tests Job
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm typecheck

      - name: Run unit tests
        run: pnpm test

  # Integration Tests Job
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start test environment
        run: |
          docker compose -f docker-compose.ci.yml up -d
          # Wait for MongoDB to be ready
          until docker compose -f docker-compose.ci.yml exec -T mongo-test mongosh --eval "db.runCommand('ping').ok" > /dev/null 2>&1; do
            echo "Waiting for MongoDB..."
            sleep 2
          done
        timeout-minutes: 2

      - name: Run integration tests
        run: |
          # Use the existing integration test script
          ./scripts/run-integration-tests.sh
        env:
          MONGODB_URI: mongodb://localhost:27018/mern_test
          NODE_ENV: test
          PORT: 4001

      - name: Cleanup test environment
        if: always()
        run: |
          docker compose -f docker-compose.ci.yml down -v

  # Build Job
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build API
        run: |
          cd apps/api
          pnpm build

      - name: Build Web
        run: |
          cd apps/web
          pnpm build

      - name: Build Shared
        run: |
          cd packages/shared
          pnpm build
